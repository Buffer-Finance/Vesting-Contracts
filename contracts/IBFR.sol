// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Address.sol";
import "OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/ERC20.sol";
import "OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/utils/SafeERC20.sol";
import "OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/access/Ownable.sol";

/**
 * @author Heisenberg
 * @title Buffer iBFR Token
 * @notice The central token to the Buffer ecosystem
 */
contract IBFR is ERC20("iBuffer Token", "iBFR"), Ownable
{
    using SafeERC20 for ERC20;

    /**
     * @dev - The max supply.
     */
    uint internal constant TOTAL_MAX_SUPPLY = 100_000_000e18;

    /**
     * @dev - Customie your release schedule here 
     */
    uint[60]  public _teamLockDurations = [
        31101300, 33693300, 36285300, 38877300, 41469300, 44061300, 46653300, 49245300, 51837300, 54429300, 57021300, 59613300, 62205300, 64797300, 67389300, 69981300, 72573300, 75165300, 77757300, 80349300, 82941300, 85533300, 88125300, 90717300, 93309300, 95901300, 98493300, 101085300, 103677300, 106269300, 108861300, 111453300, 114045300, 116637300, 119229300, 121821300, 124413300, 127005300, 129597300, 132189300, 134781300, 137373300, 139965300, 142557300, 145149300, 147741300, 150333300, 152925300, 155517300, 158109300, 160701300, 163293300, 165885300, 168477300, 171069300, 173661300, 176253300, 178845300, 181437300
    ];

    uint[60]  public _teamLockAmounts = [

    ];

    bool[60]  public _teamClaimed;

    uint public constant UNLOCK_TIME = 1632156300;
    uint internal constant TEAM_LOCKED_SUPPLY = 10_000_000e18;

    constructor(){
        _mint(msg.sender, TOTAL_MAX_SUPPLY - TEAM_LOCKED_SUPPLY);
        _mint(address(this), TEAM_LOCKED_SUPPLY);
    }

    /**
     * @dev - Team allocation - lock and release
     */
    function claimTeamAllocation(uint index) external onlyOwner {

        require(index < _teamLockDurations.length, "Index out of range");
        require(_teamClaimed[index]==false, "This index is already claimed");
       
        uint256 duration = _teamLockDurations[index];
        require(block.timestamp >= UNLOCK_TIME + duration, "Still in time-lock");

        _teamClaimed[index] = true;

        // transfer to owner address //
        ERC20 ercToken = ERC20(address(this));
        ercToken.safeTransfer(msg.sender, _teamLockAmounts[index]);
    }

    function getTeamAllocationUnlockDate(uint index) external view returns (uint) {
        require(index < _teamLockDurations.length, "Index out of range");
        return UNLOCK_TIME + _teamLockDurations[index];
    }
}
